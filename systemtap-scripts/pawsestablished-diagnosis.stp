/*
 * When using netstat with '-s' option, we may get some output like:
 *      16407731 packets rejects in established connections because of timestamp
 * the rejects packets are caused by setting up systcl.net.ipv4.tcp_timestamps
 * By the way, 16407731 is graped from /proc/net/netstat, which is the
 * value of PAWSEstab. 
 * 
 * While I want to check whether this kind of rejection can effects the 
 * QoS of our network services or not.
 * 
 * After some diging, the counter is increase by the following statement
 *      NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSESTABREJECTED);
 * and this statement is used in three function:
 *      tcp_timewait_state_process() in tcp_minisocks.c
 *      tcp_check_req() in tcp_minisocks.c
 *      tcp_validate_incoming() in tcp_input.c
 * tcp_paws_reject() is called in tcp_minisocks.c functions, and
 * tcp_paws_discard() is called in tcp_valdate_incoming()
 *
 * This systemtap script checks the following results
 *      case 1: return value of tcp_paws_reject() and why ?
 *      case 2: return value of tcp_paws_discard() and why ?
 *
 * Auther: Perth Charles (zhongbincharles@gmail.com)
 */

global found1 = 0  /* found rejected packets in case 1 ? */
global found2 = 0  /* found rejected packets in case 2 ? */
global found2_lk = 0

probe begin
{
    printf("\nStart to diagnosis paws established case\n");
}

probe end
{
    printf("\n found1 = %u found2 = %u \nEnd... \n", found1, found2);
}

/* Check case 1 */
probe kernel.function("tcp_paws_reject").return
{
    if ($return == 1) {
        printf("\n%s(): (ts_recent=%u - rcv_tsval=%u)\n",
               probefunc(), $rx_opt->ts_recent, $rx_opt->rcv_tsval);
        found1++;
    }
}

/* Check case 2.1 */
probe kernel.function("tcp_paws_check")
{
    if (probefunc() == "tcp_validate_incoming" && ($rx_opt->ts_recent > $rx_opt->rcv_tsval + 1)) {
        printf("%s(): (ts_recent=%u - rcv_tsval=%u)\n",
               probefunc(), $rx_opt->ts_recent, $rx_opt->rcv_tsval);
        found2++;
        found2_lk = 1;
    }
}

/* Check case 2.2 */
probe kernel.function("tcp_disordered_ack")
{
    if (found2_lk == 1) {
        iphdr = __get_skb_iphdr($skb)
        saddr = format_ipaddr(__ip_skb_saddr(iphdr), %{AF_INET%})
        daddr = format_ipaddr(__ip_skb_daddr(iphdr), %{AF_INET%})
        /* print saddr for further debug */
        printf("\t\t saddr=%15s, daddr=%15s\n", saddr, daddr);
        found2_lk = 0;
    }
}

/* force to exit when found enough cases */
probe timer.ms(1000)
{
    if (found1 > 100 || found2 > 100) {
        exit();
    }
}
